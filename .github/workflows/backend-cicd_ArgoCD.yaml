name: Backend CI/CD with ArgoCD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api-gateway/**'
      - 'user-service/**'
      - 'bill-service/**'
      - 'product-service/**'
      - 'kos-mock/**'
      - 'common/**'
      - '.github/workflows/backend-cicd_ArgoCD.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'api-gateway/**'
      - 'user-service/**'
      - 'bill-service/**'
      - 'product-service/**'
      - 'kos-mock/**'
      - 'common/**'

env:
  ACR_NAME: acrdigitalgarage03
  RESOURCE_GROUP: rg-digitalgarage-03
  AKS_CLUSTER: aks-digitalgarage-03
  SYSTEM_NAME: phonebill
  MANIFEST_REPO_URL: https://github.com/Minseo-Jo/phonebill.git

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-gateway: ${{ steps.changes.outputs.api-gateway }}
      user-service: ${{ steps.changes.outputs.user-service }}
      bill-service: ${{ steps.changes.outputs.bill-service }}
      product-service: ${{ steps.changes.outputs.product-service }}
      kos-mock: ${{ steps.changes.outputs.kos-mock }}
      common: ${{ steps.changes.outputs.common }}
      environment: ${{ steps.env.outputs.environment }}
      image_tag: ${{ steps.tag.outputs.image_tag }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          api-gateway:
            - 'api-gateway/**'
            - 'common/**'
          user-service:
            - 'user-service/**'
            - 'common/**'
          bill-service:
            - 'bill-service/**'
            - 'common/**'
          product-service:
            - 'product-service/**'
            - 'common/**'
          kos-mock:
            - 'kos-mock/**'
            - 'common/**'
          common:
            - 'common/**'

    - name: Set environment based on branch
      id: env
      run: |
        if [[ ${{ github.ref_name }} == "main" ]]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        elif [[ ${{ github.ref_name }} == "develop" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

    - name: Generate image tag
      id: tag
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        echo "image_tag=${SHORT_SHA}" >> $GITHUB_OUTPUT

  build:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.api-gateway == 'true' ||
      needs.detect-changes.outputs.user-service == 'true' ||
      needs.detect-changes.outputs.bill-service == 'true' ||
      needs.detect-changes.outputs.product-service == 'true' ||
      needs.detect-changes.outputs.kos-mock == 'true' ||
      needs.detect-changes.outputs.common == 'true'

    strategy:
      matrix:
        service: [api-gateway, user-service, bill-service, product-service, kos-mock]
        exclude:
          - service: api-gateway
            condition: ${{ needs.detect-changes.outputs.api-gateway != 'true' }}
          - service: user-service
            condition: ${{ needs.detect-changes.outputs.user-service != 'true' }}
          - service: bill-service
            condition: ${{ needs.detect-changes.outputs.bill-service != 'true' }}
          - service: product-service
            condition: ${{ needs.detect-changes.outputs.product-service != 'true' }}
          - service: kos-mock
            condition: ${{ needs.detect-changes.outputs.kos-mock != 'true' }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew ${{ matrix.service }}:build -x test

    - name: Run Tests
      run: ./gradlew ${{ matrix.service }}:test

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          ${{ matrix.service }}/build/test-results/test/*.xml

  release:
    needs: [detect-changes, build]
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.api-gateway == 'true' ||
      needs.detect-changes.outputs.user-service == 'true' ||
      needs.detect-changes.outputs.bill-service == 'true' ||
      needs.detect-changes.outputs.product-service == 'true' ||
      needs.detect-changes.outputs.kos-mock == 'true' ||
      needs.detect-changes.outputs.common == 'true'

    strategy:
      matrix:
        service: [api-gateway, user-service, bill-service, product-service, kos-mock]
        exclude:
          - service: api-gateway
            condition: ${{ needs.detect-changes.outputs.api-gateway != 'true' }}
          - service: user-service
            condition: ${{ needs.detect-changes.outputs.user-service != 'true' }}
          - service: bill-service
            condition: ${{ needs.detect-changes.outputs.bill-service != 'true' }}
          - service: product-service
            condition: ${{ needs.detect-changes.outputs.product-service != 'true' }}
          - service: kos-mock
            condition: ${{ needs.detect-changes.outputs.kos-mock != 'true' }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build JAR
      run: ./gradlew ${{ matrix.service }}:bootJar

    - name: Azure Container Registry Login
      uses: Azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and Push Docker Image
      run: |
        IMAGE_TAG="${{ needs.detect-changes.outputs.environment }}-${{ needs.detect-changes.outputs.image_tag }}"
        docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.SYSTEM_NAME }}/${{ matrix.service }}:${IMAGE_TAG} \
          -f ${{ matrix.service }}/Dockerfile .
        docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.SYSTEM_NAME }}/${{ matrix.service }}:${IMAGE_TAG}

  update-manifest:
    name: Update Manifest Repository
    needs: [detect-changes, build, release]
    runs-on: ubuntu-latest
    if: |
      needs.detect-changes.outputs.api-gateway == 'true' ||
      needs.detect-changes.outputs.user-service == 'true' ||
      needs.detect-changes.outputs.bill-service == 'true' ||
      needs.detect-changes.outputs.product-service == 'true' ||
      needs.detect-changes.outputs.kos-mock == 'true' ||
      needs.detect-changes.outputs.common == 'true'

    steps:
    - name: Set image tag environment variable
      run: |
        echo "IMAGE_TAG=${{ needs.detect-changes.outputs.image_tag }}" >> $GITHUB_ENV
        echo "ENVIRONMENT=${{ needs.detect-changes.outputs.environment }}" >> $GITHUB_ENV

    - name: Update Manifest Repository
      run: |
        # 매니페스트 레포지토리 클론
        REPO_URL=$(echo "${{ env.MANIFEST_REPO_URL }}" | sed 's|https://||')
        git clone https://${{ secrets.GIT_USERNAME }}:${{ secrets.GIT_PASSWORD }}@${REPO_URL} manifest-repo
        cd manifest-repo

        # Kustomize 설치
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

        # 매니페스트 업데이트 (kustomize 디렉토리가 있는 경우에만)
        if [ -d "${{ env.SYSTEM_NAME }}/kustomize/overlays/${{ env.ENVIRONMENT }}" ]; then
          cd ${{ env.SYSTEM_NAME }}/kustomize/overlays/${{ env.ENVIRONMENT }}

          # 변경된 서비스들만 이미지 태그 업데이트
          services=""
          if [[ "${{ needs.detect-changes.outputs.api-gateway }}" == "true" ]]; then
            services="$services api-gateway"
          fi
          if [[ "${{ needs.detect-changes.outputs.user-service }}" == "true" ]]; then
            services="$services user-service"
          fi
          if [[ "${{ needs.detect-changes.outputs.bill-service }}" == "true" ]]; then
            services="$services bill-service"
          fi
          if [[ "${{ needs.detect-changes.outputs.product-service }}" == "true" ]]; then
            services="$services product-service"
          fi
          if [[ "${{ needs.detect-changes.outputs.kos-mock }}" == "true" ]]; then
            services="$services kos-mock"
          fi

          # 각 서비스별 이미지 태그 업데이트
          for service in $services; do
            echo "Updating $service image tag..."
            kustomize edit set image ${{ env.ACR_NAME }}.azurecr.io/${{ env.SYSTEM_NAME }}/$service:${{ env.ENVIRONMENT }}-${{ env.IMAGE_TAG }}
          done

          # Git 설정 및 푸시
          cd ../../../..
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .

          # 변경사항이 있는 경우에만 커밋
          if ! git diff --staged --quiet; then
            git commit -m "🚀 Update ${{ env.SYSTEM_NAME }} ${{ env.ENVIRONMENT }} images to ${{ env.ENVIRONMENT }}-${{ env.IMAGE_TAG }}"
            git push origin main
            echo "✅ 매니페스트 업데이트 완료. ArgoCD가 자동으로 배포합니다."
          else
            echo "📋 변경사항이 없어서 커밋하지 않았습니다."
          fi
        else
          echo "⚠️ Kustomize 디렉토리가 없습니다: ${{ env.SYSTEM_NAME }}/kustomize/overlays/${{ env.ENVIRONMENT }}"
        fi