name: Backend CI/CD Pipeline with ArgoCD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'api-gateway/**'
      - 'user-service/**'
      - 'bill-service/**'
      - 'product-service/**'
      - 'kos-mock/**'
      - 'common/**'
      - '.github/workflows/backend-cicd_ArgoCD.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'api-gateway/**'
      - 'user-service/**'
      - 'bill-service/**'
      - 'product-service/**'
      - 'kos-mock/**'
      - 'common/**'

env:
  ACR_NAME: acrdigitalgarage03
  RESOURCE_GROUP: rg-digitalgarage-03
  AKS_CLUSTER: aks-digitalgarage-03
  NAMESPACE: phonebill-dg0515
  SYSTEM_NAME: phonebill
  MANIFEST_REPO_URL: https://github.com/Minseo-Jo/phonebill.git
  SERVICE_NAMES: "api-gateway user-service bill-service product-service kos-mock"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
      environment: ${{ steps.meta.outputs.environment }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: ${{ runner.os }}-gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Set image metadata
      id: meta
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        if [ "$BRANCH_NAME" = "main" ]; then
          ENVIRONMENT="prod"
        elif [ "$BRANCH_NAME" = "develop" ]; then
          ENVIRONMENT="dev"
        else
          ENVIRONMENT="staging"
        fi

        IMAGE_TAG=${GITHUB_SHA::7}-$(date +%Y%m%d%H%M%S)

        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Environment: $ENVIRONMENT"
        echo "Image Tag: $IMAGE_TAG"

    - name: Build with Gradle
      run: |
        ./gradlew clean build -x test
        echo "✅ Build completed successfully"

    - name: Run Tests
      run: |
        ./gradlew test
        echo "✅ Tests completed successfully"

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: ${{ runner.os }}-gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build JAR files
      run: |
        ./gradlew clean build -x test
        echo "✅ JAR build completed"

    - name: Azure Container Registry Login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and Push Docker Images
      run: |
        ENVIRONMENT=${{ needs.build.outputs.environment }}
        IMAGE_TAG=${{ needs.build.outputs.image_tag }}

        # 각 서비스별 이미지 빌드 및 푸시
        for service in ${{ env.SERVICE_NAMES }}; do
          echo "🔨 Building $service image..."

          # Dockerfile 경로 확인
          if [ -f "$service/Dockerfile" ]; then
            DOCKERFILE_PATH="$service/Dockerfile"
          else
            echo "❌ Dockerfile not found for $service"
            continue
          fi

          # 이미지 빌드
          docker build \
            -f $DOCKERFILE_PATH \
            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.SYSTEM_NAME }}/$service:$ENVIRONMENT-$IMAGE_TAG \
            -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.SYSTEM_NAME }}/$service:latest \
            .

          # 이미지 푸시
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.SYSTEM_NAME }}/$service:$ENVIRONMENT-$IMAGE_TAG
          docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.SYSTEM_NAME }}/$service:latest

          echo "✅ $service image pushed successfully"
        done

  update-manifest:
    name: Update Manifest Repository
    needs: [build, release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Set image tag environment variable
      run: |
        echo "IMAGE_TAG=${{ needs.build.outputs.image_tag }}" >> $GITHUB_ENV
        echo "ENVIRONMENT=${{ needs.build.outputs.environment }}" >> $GITHUB_ENV

    - name: Update Manifest Repository
      run: |
        # 매니페스트 레포지토리 클론
        REPO_URL=$(echo "${{ env.MANIFEST_REPO_URL }}" | sed 's|https://||')
        git clone https://${{ secrets.GIT_USERNAME }}:${{ secrets.GIT_PASSWORD }}@${REPO_URL} manifest-repo
        cd manifest-repo

        # Kustomize 설치
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

        # 매니페스트 업데이트 (기존 deployment/cicd 경로 사용)
        cd deployment/cicd/kustomize/overlays/${{ env.ENVIRONMENT }}

        # 각 서비스별 이미지 태그 업데이트
        services="${{ env.SERVICE_NAMES }}"
        for service in $services; do
          kustomize edit set image ${{ env.ACR_NAME }}.azurecr.io/${{ env.SYSTEM_NAME }}/$service:${{ env.ENVIRONMENT }}-${{ env.IMAGE_TAG }}
        done

        # Git 설정 및 푸시
        cd ../../../../..
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add .
        git commit -m "🚀 Update ${{ env.SYSTEM_NAME }} ${{ env.ENVIRONMENT }} images to ${{ env.ENVIRONMENT }}-${{ env.IMAGE_TAG }}"
        git push origin main

        echo "✅ 매니페스트 업데이트 완료. ArgoCD가 자동으로 배포합니다."